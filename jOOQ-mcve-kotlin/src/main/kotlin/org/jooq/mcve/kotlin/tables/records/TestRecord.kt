/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.custom.TestId
import org.jooq.mcve.kotlin.tables.Test


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestRecord() : UpdatableRecordImpl<TestRecord>(Test.TEST), Record2<TestId?, Int?> {

    open var id: TestId?
        set(value): Unit = set(0, value)
        get(): TestId? = get(0) as TestId?

    open var cd: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<TestId?> = super.key() as Record1<TestId?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<TestId?, Int?> = super.fieldsRow() as Row2<TestId?, Int?>
    override fun valuesRow(): Row2<TestId?, Int?> = super.valuesRow() as Row2<TestId?, Int?>
    override fun field1(): Field<TestId?> = Test.TEST.ID
    override fun field2(): Field<Int?> = Test.TEST.CD
    override fun component1(): TestId? = id
    override fun component2(): Int? = cd
    override fun value1(): TestId? = id
    override fun value2(): Int? = cd

    override fun value1(value: TestId?): TestRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): TestRecord {
        this.cd = value
        return this
    }

    override fun values(value1: TestId?, value2: Int?): TestRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised TestRecord
     */
    constructor(id: TestId? = null, cd: Int? = null): this() {
        this.id = id
        this.cd = cd
    }
}
